# Import the necessary packages
import numpy as np
import scipy.signal as ss

####### Definitions #######
# Sigmoid function
def sigmoid(value):
	return 1.0 / (1.0 + np.exp(-value))

def convolve(patch_dim, num_features, images, W, b):
	'''
	Parameters:
	patch_dim - dimension of patch region (15)
	num_features - amount of features we are using (100)
	images - matrix of our images (m, 28, 28)
	W - our matrix of our weights (100, 225)
	b - our bias term (100, 1)

	Returns:
	convolved_features - matrix of convolved features (100, m, 14, 14)
	'''

	# Number of images
	m = images.shape[0]
	# Dimension of image
	img_dim = images.shape[1]

	convolved_features = np.zeros((num_features, m, img_dim - patch_dim + 1, img_dim - patch_dim + 1)) # (100, m , 14, 14)

	# Reshape our weights so that they are a (100, 15, 15)
	W = np.reshape(W, (len(W), len(W[0]) / patch_dim, len(W[0]) / patch_dim))

	# For each image
	for i in range(m):
		# For each feature
		for j in range(num_features):
		
			# Convolution of image with feature matrix for each channel
			convolved_image = np.zeros((img_dim - patch_dim + 1, img_dim - patch_dim + 1))   # (57, 57)
			
			# Obtain the feature (patch_dim, patch_dim) needed during the convolution
			feature = np.zeros((patch_dim, patch_dim))                                       # (15, 15)
			feature = W[j, :, :]
	
			# Flip the feature matrix because of the definition of convolution
			feature = np.flipud(np.fliplr(np.squeeze(feature)))
	
			# Obtain the image
			im = np.squeeze(images[i, :, :])                                                 # (28, 28)
	
			# Convolve feature with im, add the result to convolved_image
			convolved_image += ss.convolve2d(im, feature, mode = 'valid', boundary = 'fill', fillvalue = 0)	# (14, 14)

			# Add our bias term
			convolved_image += b[j, 0]

			# Apply the sigmoid function to get the hidden activation
			# The convolved feature is the sum of the convolved values for all channels
			convolved_features[j, i, :, :] = sigmoid(convolved_image)

	return convolved_features
			

